/* Released under an MIT-style license. See LICENSE. */

package main

import (
	"os"
	"os/signal"
	"syscall"
	"code.google.com/p/go.crypto/ssh/terminal"
)

type trs struct {
	*terminal.Terminal
}

var term *terminal.Terminal

func (r *trs) ReadString(_ byte) (line string, err error) {
	line, err = r.Terminal.ReadLine()
	if err == nil {
		line += "\n"
	}
	return
}

func (r *trs) resize() {
	println("Resizing...")
	if width, height, err := terminal.GetSize(0); err == nil {
		r.Terminal.SetSize(width, height)
	}
}

func main() {
	Start(len(os.Args) <= 1)

	if len(os.Args) <= 1 {
		oldState, err := terminal.MakeRaw(0)
      		if err != nil {
              		panic(err)
      		}
      		defer terminal.Restore(0, oldState)

                term := &trs{terminal.NewTerminal(os.Stdin, "> ")}
		term.resize()

		irq := make(chan os.Signal, 1)
        	signal.Notify(irq, syscall.SIGWINCH)
		go func() {
			select {
	                case <-irq:
                                term.resize()
                	default:
                       		;
			}
                }()

		Parse(term, Evaluate)
	} else {
		f, err := os.OpenFile(os.Args[1], os.O_RDONLY, 0666)
		if err == nil {
			ParseFile(f, Evaluate)
		}
	}

	os.Exit(ExitStatus())
}

