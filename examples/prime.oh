#!/usr/local/bin/oh

define prime-numbers: channel
define read-car: method: car: $self::read

define counter: method n {
    define ack: channel 

    write n ack

    while true: write: set n: add n 1 >(ack::read-car)
}

define filter: method base {
    define ack: channel
    define n: read-car

    write n ack 

    while true: if (mod (set n: read-car) base): write n >(ack::read-car)
}

counter 2 | block {
    define in $stdin

    while true {
        define l: in::read
        define out: channel

        write: car l

        spawn: filter (car l) <in >out

        (cadr l)::write in

        set in out
    }
} > prime-numbers &

define count: integer 250
echo "The first" count "prime numbers"

while count {
    write: read-car 
    set count: sub count 1
} <prime-numbers

